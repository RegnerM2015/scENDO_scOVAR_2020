
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ###########################################################
> # Matt Regner
> # Franco Lab
> # Date: May 2020-May 2021
> # 
> # Sample: All 
> # Description: This script performs the following tasks  
> #         1) Find distal enhancer elements that have 
> #            nonzero counts across all samples (clusters)
> #         2) Subset Marker Enhancer BED files to new enhancers
> ###########################################################
> library(ArchR)
Loading required package: ggplot2
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians

Loading required package: data.table

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

Loading required package: rhdf5
Loading required package: magrittr

Attaching package: ‘ArchR’

The following objects are masked _by_ ‘.GlobalEnv’:

    addArchRDebugging, addArchRLogging, addCoAccessibility,
    addPeak2GeneLinks, correlateMatrices, correlateTrajectories,
    createLogFile, getArchRDebugging, getArchRLogging,
    getCoAccessibility, getFragmentsFromArrow, getMatrixFromArrow,
    getMatrixFromProject, getPeak2GeneLinks, peak2GeneHeatmap,
    plotPeak2GeneHeatmap, validBSgenome

> source("./Archr_Peak_Null_Permute.R")
> source("./Archr_Peak_RawPval.R")
> source("./getMatrixFromProject.R")
> library(stringr)
> library(utils)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following object is masked from ‘package:Biobase’:

    combine

The following objects are masked from ‘package:GenomicRanges’:

    intersect, setdiff, union

The following object is masked from ‘package:GenomeInfoDb’:

    intersect

The following objects are masked from ‘package:IRanges’:

    collapse, desc, intersect, setdiff, slice, union

The following objects are masked from ‘package:S4Vectors’:

    first, intersect, rename, setdiff, setequal, union

The following objects are masked from ‘package:BiocGenerics’:

    combine, intersect, setdiff, union

The following object is masked from ‘package:matrixStats’:

    count

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> ArchR::addArchRThreads(threads = 32)
Setting default number of Parallel threads to 32.
> h5disableFileLocking()
> # ONlY USE 100% patient-specfic 
> labels <- list.files(pattern = "Marker_Enhancers_ArchR")
> labels <- str_remove(labels,"Marker_Enhancers_ArchR_")
> labels <- str_remove(labels,".bed")
> labels <- labels[-12]# Remove extra
> print(labels)
 [1] "0-Fibroblast"              "10-Epithelial_cell"       
 [3] "16-Fibroblast"             "17-Epithelial_cell"       
 [5] "19-Epithelial_cell"        "21-Unciliated_epithelia_1"
 [7] "27-Fibroblast"             "3-Epithelial_cell"        
 [9] "31-Unciliated_epithelia_1" "34-Epithelial_cell"       
[11] "9-Epithelial_cell"        
> 
> enhancers <- read.delim("Marker_Enhancers_ArchR-nodups.bed",header = F)
> enhancers <- paste0(enhancers$V1,":",enhancers$V2,"-",enhancers$V3)
> 
> # Pseudobulk ATAC enhancer matrix
> proj.archr <- readRDS("./final_archr_proj_archrGS-P2Gs.rds")
> peak.mat <- getMatrixFromProject.mod(proj.archr,useMatrix = "PeakMatrix")
ArchR logging to : ArchRLogs/ArchR-getMatrixFromProject-10a83457f2708-Date-2021-06-23_Time-14-29-55.log
If there is an issue, please report to github with logFile!
2021-06-23 14:31:48 : Organizing colData, 1.906 mins elapsed.
2021-06-23 14:31:49 : Organizing rowData, 1.912 mins elapsed.
2021-06-23 14:31:49 : Organizing rowRanges, 1.913 mins elapsed.
2021-06-23 14:31:49 : Organizing Assays (1 of 1), 1.915 mins elapsed.
2021-06-23 14:34:25 : Constructing SummarizedExperiment, 4.526 mins elapsed.
2021-06-23 14:34:30 : Finished Matrix Creation, 4.606 mins elapsed.
> cell.names <- colnames(assay(peak.mat))
> peak.names <- paste0(seqnames(rowRanges(peak.mat)),":", start(ranges(rowRanges(peak.mat))),"-", end(ranges(rowRanges(peak.mat))))
> 
> 
> peak.mat <- assay(peak.mat)
> 
> dim(peak.mat)
[1] 519525  72507
> length(cell.names)
[1] 72507
> length(peak.names)
[1] 519525
> 
> colnames(peak.mat) <- cell.names
> rownames(peak.mat) <- peak.names
> head(peak.mat[,1:4])
6 x 4 sparse Matrix of class "dgCMatrix"
                   3571DL#CGCACAGTCTATCTAC-1 3571DL#GCACCTTTCACTTACT-1
chr1:794811-795311                         .                         .
chr1:804261-804761                         .                         .
chr1:817104-817604                         .                         .
chr1:817941-818441                         .                         .
chr1:818780-819280                         .                         .
chr1:822939-823439                         .                         .
                   3571DL#GTAATCGAGCGTTAGG-1 3571DL#CTGGCAGGTATTCGAC-1
chr1:794811-795311                         .                         .
chr1:804261-804761                         .                         .
chr1:817104-817604                         .                         .
chr1:817941-818441                         .                         .
chr1:818780-819280                         .                         .
chr1:822939-823439                         .                         .
> 
> 
> peaks.pseudobulk <- data.frame(rownames(peak.mat))
> # Run twice to hit both whitespaces 
> proj.archr$predictedGroup_ArchR <- str_replace(proj.archr$predictedGroup_ArchR," ","_")
> proj.archr$predictedGroup_ArchR <- str_replace(proj.archr$predictedGroup_ArchR," ","_")
> for (i in labels){
+   cells <- rownames(dplyr::filter(as.data.frame(proj.archr@cellColData),predictedGroup_ArchR == i))
+   
+   peak.mat.sub <- peak.mat[,colnames(peak.mat) %in% cells]
+   
+   peaks.bulk <- Matrix::rowSums(peak.mat.sub)
+   
+   peaks.pseudobulk$i <- peaks.bulk
+   colnames(peaks.pseudobulk)[dim(peaks.pseudobulk)[2]] <- i
+   
+   print("Iteration complete")
+ }
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
[1] "Iteration complete"
> 
> rownames(peaks.pseudobulk) <- peaks.pseudobulk[,1]
> peaks.pseudobulk <- peaks.pseudobulk[,-1]
> 
> peaks.pseudobulk <- peaks.pseudobulk[rownames(peaks.pseudobulk) %in% unique(enhancers),]
> 
> # Remove enhancer peaks that have ANY zero counts in ANY sample (no replicates)
> peaks.pseudobulk[peaks.pseudobulk == 0] <- NA
> peaks.pseudobulk <- peaks.pseudobulk[complete.cases(peaks.pseudobulk),]
> 
> 
> 
> # Subset original Marker enhancer lists to new updated nonzero enhancers
> for ( i in 1:length(labels)){
+   file <- paste0("Marker_Enhancers_ArchR_",labels[i],".bed")
+   
+   bed <- read.delim(file,header = F)
+   rownames(bed) <- paste0(bed$V1,":",bed$V2,"-",bed$V3)
+   
+   bed.new <- bed[rownames(bed) %in% rownames(peaks.pseudobulk),]
+   
+   write.table(bed.new,paste0("Marker_Enhancers_ArchR_",labels[i],"-updated.bed"),row.names = F,col.names = F,quote = F,sep = "\t")
+ }
> 
> 
> 
> writeLines(capture.output(sessionInfo()), "sessionInfo_TFSEE_Step1_NonZero_Enhancers.txt")
> 
> proc.time()
   user  system elapsed 
589.757 424.717 384.622 
