
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################
> # Matt Regner
> # Franco Lab 
> # 2020-2021
> # Description: plot P2G histograms, plot P2G heatmap,
> # re-run overlap analysis, plot browser track
> ###################################################
> 
> source("P2G_Heatmap_Distal.R")
> source("Archr_Peak_RawPval.R")
> source("Archr_Peak_Null_Permute.R")
> library(ggplot2)
> library(Seurat)
> library(scales)
> library(forcats)
> library(RColorBrewer)
> library(ArchR)
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians


Attaching package: ‘SummarizedExperiment’

The following object is masked from ‘package:Seurat’:

    Assays

Loading required package: data.table

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

Loading required package: rhdf5
Loading required package: magrittr

Attaching package: ‘ArchR’

The following objects are masked _by_ ‘.GlobalEnv’:

    addArchRDebugging, addArchRLogging, addCoAccessibility,
    addPeak2GeneLinks, correlateMatrices, correlateTrajectories,
    createLogFile, getArchRDebugging, getArchRLogging,
    getCoAccessibility, getFragmentsFromArrow, getMatrixFromArrow,
    getMatrixFromProject, getPeak2GeneLinks, peak2GeneHeatmap,
    plotPeak2GeneHeatmap, validBSgenome

> library(stringr)
> library(stringi)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following object is masked from ‘package:Biobase’:

    combine

The following objects are masked from ‘package:GenomicRanges’:

    intersect, setdiff, union

The following object is masked from ‘package:GenomeInfoDb’:

    intersect

The following objects are masked from ‘package:IRanges’:

    collapse, desc, intersect, setdiff, slice, union

The following objects are masked from ‘package:S4Vectors’:

    first, intersect, rename, setdiff, setequal, union

The following objects are masked from ‘package:BiocGenerics’:

    combine, intersect, setdiff, union

The following object is masked from ‘package:matrixStats’:

    count

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)

Attaching package: ‘tidyr’

The following object is masked from ‘package:magrittr’:

    extract

The following objects are masked from ‘package:Matrix’:

    expand, pack, unpack

The following object is masked from ‘package:S4Vectors’:

    expand

> addArchRThreads(32)
Setting default number of Parallel threads to 32.
> h5disableFileLocking()
> ####################################################################
> # PART 1: summary distribution histograms (correlation and p-values)
> # 1) Observed data
> # 2) Null data example
> ####################################################################
> # Read in P2G data
> p2g <- readRDS("./All_P2G_Observed.rds")
> p2g$RawPVal <- as.numeric(p2g$RawPVal)
> p2g$Correlation <- as.numeric(p2g$Correlation)
> 
> # Plot correlation histogram
> p1 <- ggplot(p2g,aes(x=Correlation))+geom_histogram(color="black",fill="gray90",size=0.3,boundary = 0,bins=15)+
+   theme_bw()+
+   scale_y_continuous(expand = c(0,0),limits=c(0,1500000)) +
+   scale_x_continuous(expand= c(0,0),limits = c(-1,1))
> 
> # Plot p-value histogram
> p2 <- ggplot(p2g,aes(x=RawPVal))+geom_histogram(color="black",fill="gray90",size=0.3,boundary = 0,bins=15)+
+   theme_bw()+
+   scale_y_continuous(expand = c(0,0),
+                      limits = c(0,1.75e+06)) +
+   scale_x_continuous(expand = c(0,0),
+                      limits = c(0,1))
> 
> 
> # Read in P2G data (null example)
> p2g <- readRDS("./All_P2G_Null_example.rds")
> p2g$RawPVal <- as.numeric(p2g$RawPVal)
> p2g$Correlation <- as.numeric(p2g$Correlation)
> 
> # Plot correlation histogram
> p3 <- ggplot(p2g,aes(x=Correlation))+geom_histogram(color="black",fill="gray90",size=0.3,boundary = 0,bins=15)+
+   theme_bw()+
+   scale_y_continuous(limits=c(0,1500000),expand=c(0,0)) +
+   scale_x_continuous(expand = c(0,0),limits = c(-1,1))
> 
> # Plot p-value histogram
> p4 <- ggplot(p2g,aes(x=RawPVal))+geom_histogram(color="black",fill="gray90",size=0.3,boundary = 0,bins=15)+
+   theme_bw()+
+   scale_y_continuous(expand = c(0,0),
+                      limits = c(0,1.75e+06)) +
+   scale_x_continuous(expand = c(0,0),limits = c(0,1))
> # Plot side-by-side
> CombinePlots(list(p1,p2,p3,p4),ncol=2)+ggsave("Histograms_obs_null.pdf",height =3,width = 4)
Warning message:
CombinePlots is being deprecated. Plots should now be combined using the patchwork system. 
> 
> 
> ####################################################################
> # PART 2: Plot histograms for number of genes regulated by peaks
> ####################################################################
> # Number of peaks per number of genes
> p2g.cancer <- readRDS("./Cancer_specific_P2G_table.rds")
> p2g.normal <- readRDS("./All_P2G_Observed.rds")
> p2g.normal <- p2g.normal[p2g.normal$Correlation >= 0.45,]
> p2g.normal <- p2g.normal[p2g.normal$RawPVal <= 1e-12,]
> p2g.normal <- p2g.normal[p2g.normal$peakType == "Distal",]
> p2g.normal <- p2g.normal[p2g.normal$peakName %ni% p2g.cancer$peakName,]
> 
> df.cancer <- data.frame(num.genes = table(p2g.cancer$peakName))
> df.cancer$cat <- ifelse(df.cancer$num.genes.Freq < 3,"1to2",df.cancer$num.genes.Freq)
> df.cancer$cat <- ifelse(df.cancer$num.genes.Freq < 6 &df.cancer$num.genes.Freq >2,"3to5",df.cancer$cat)
> df.cancer$cat <- ifelse(df.cancer$num.genes.Freq >5,"6plus",df.cancer$cat)
> 
> df.normal <- data.frame(num.genes = table(p2g.normal$peakName))
> df.normal$cat <- ifelse(df.normal$num.genes.Freq < 3,"1to2",df.normal$num.genes.Freq)
> df.normal$cat <- ifelse(df.normal$num.genes.Freq < 6 &df.normal$num.genes.Freq >2,"3to5",df.normal$cat)
> df.normal$cat <- ifelse(df.normal$num.genes.Freq >5,"6plus",df.normal$cat)
> 
> # Print mean of distributions and compute wilcox test
> print(nrow(df.cancer))
[1] 3688
> print(mean(df.cancer$num.genes.Freq))
[1] 1.579989
> 
> print(nrow(df.normal))
[1] 22166
> print(mean(df.normal$num.genes.Freq))
[1] 1.443923
> 
> wilcox <- wilcox.test(df.cancer$num.genes.Freq,df.normal$num.genes.Freq)
> print(wilcox)

	Wilcoxon rank sum test with continuity correction

data:  df.cancer$num.genes.Freq and df.normal$num.genes.Freq
W = 42260820, p-value = 1.553e-05
alternative hypothesis: true location shift is not equal to 0

> 
> df.normal <- data.frame(table(df.normal$cat))
> 
> df.cancer <- data.frame(table(df.cancer$cat))
> # df.normal$type <- "normal"
> # df.cancer$type <- "cancer"
> # df<- rbind(df.normal,df.cancer)
> # p1 <- ggplot(df, aes(x=fct_rev(Var1), y=Freq, fill=type)) + 
> #   geom_bar (stat="identity", position = position_dodge(width=1))+
> #   geom_text(aes(label=Freq), vjust=-0.4, size=3.5)+ylim(c(0,26000))+
> #   theme_classic()+NoLegend()+coord_flip()
> 
> p1 <- ggplot(df.cancer, aes(x=Var1, y=Freq)) +
+   geom_bar (stat="identity", position = position_dodge(width=1))+
+   geom_text(aes(label=Freq), vjust=-0.4, size=3.5)+
+   theme_classic()+NoLegend()
> 
> p2 <- ggplot(df.normal, aes(x=Var1, y=Freq)) +
+   geom_bar (stat="identity", position = position_dodge(width=1))+
+   geom_text(aes(label=Freq), vjust=-0.4, size=3.5)+
+   theme_classic()+NoLegend()
> CombinePlots(list(p1,p2),ncol=2)+ggsave("Genes_Peaks_Histograms.pdf",width=8,height = 3)
Warning message:
CombinePlots is being deprecated. Plots should now be combined using the patchwork system. 
> 
> 
> 
> # p2g.cancer <- readRDS("./Cancer_specific_P2G_table.rds")
> # p2g.normal <- readRDS("./All_P2G_Observed.rds")
> # p2g.normal <- p2g.normal[p2g.normal$Correlation >= 0.45,]
> # p2g.normal <- p2g.normal[p2g.normal$RawPVal <= 1e-12,]
> # p2g.normal <- p2g.normal[p2g.normal$peakType == "Distal",]
> # p2g.normal <- p2g.normal[p2g.normal$peakName %ni% p2g.cancer$peakName,]
> # 
> # df.cancer <- data.frame(num.peaks = table(p2g.cancer$geneName))
> # df.cancer$cat <- ifelse(df.cancer$num.peaks.Freq < 3,"1to2",df.cancer$num.peaks.Freq)
> # df.cancer$cat <- ifelse(df.cancer$num.peaks.Freq < 6 &df.cancer$num.peaks.Freq >2,"3to5",df.cancer$cat)
> # df.cancer$cat <- ifelse(df.cancer$num.peaks.Freq >5,"6plus",df.cancer$cat)
> # 
> # 
> # df.normal <- data.frame(num.peaks = table(p2g.normal$geneName))
> # df.normal$cat <- ifelse(df.normal$num.peaks.Freq < 3,"1to2",df.normal$num.peaks.Freq)
> # df.normal$cat <- ifelse(df.normal$num.peaks.Freq < 6 &df.normal$num.peaks.Freq >2,"3to5",df.normal$cat)
> # df.normal$cat <- ifelse(df.normal$num.peaks.Freq >5,"6plus",df.normal$cat)
> # 
> # df.cancer <- data.frame(table(df.cancer$cat))
> # df.normal <- data.frame(table(df.normal$cat))
> # 
> # df.normal$type <- "normal"
> # df.cancer$type <- "cancer"
> # df<- rbind(df.normal,df.cancer)
> # 
> # p2 <- ggplot(df, aes(x=fct_rev(Var1), y=Freq, fill=type)) + 
> #   geom_bar (stat="identity", position = position_dodge(width = 1))+
> #   geom_text(aes(label=Freq), vjust=-0.4, size=3.5)+ylim(c(0,5000))+
> #   theme_classic()+NoLegend()+coord_flip()
> # 
> # CombinePlots(list(p1,p2),ncol=2)+ggsave("Genes_Peaks_Histograms.pdf",width=8,height = 3)
> 
> ####################################################################
> # PART 3: browser track for RHEB enhancers
> # 1) Plot browser track
> # 2) Verify cancer-specific enhancers have differential accessibility
> ####################################################################
> 
> # Read in other annotation features:
> encode.all <- read.delim("./GRCh38-ccREs.bed",header =F)
> colnames(encode.all)[1:3] <- c("seqnames","start","end")
> encode.all <- makeGRangesFromDataFrame(encode.all)
> 
> ft.peaks <- readRDS("./Fallopian_Tube_Cell_line_Peaks.rds")
> ft.peaks <- ft.peaks[,3:5]
> colnames(ft.peaks)[1:3] <- c("seqnames","start","end")
> ft.peaks <- makeGRangesFromDataFrame(ft.peaks)
> 
> ov.peaks <- readRDS("./Ovarian_Epithelial_Cell_line_Peaks.rds")
> ov.peaks <- ov.peaks[,3:5]
> colnames(ov.peaks)[1:3] <- c("seqnames","start","end")
> ov.peaks <- makeGRangesFromDataFrame(ov.peaks)
> 
> atac <- readRDS("final_archr_proj_archrGS-P2Gs.rds")
> # ATAC
> levels(factor(atac$predictedGroup_ArchR))
 [1] "0-Fibroblast"              "1-Endothelia"             
 [3] "10-Epithelial cell"        "11-Unciliated epithelia 1"
 [5] "12-Stromal fibroblasts"    "13-Macrophages"           
 [7] "14-Stromal fibroblasts"    "15-Stromal fibroblasts"   
 [9] "16-Fibroblast"             "17-Epithelial cell"       
[11] "18-Fibroblast"             "19-Epithelial cell"       
[13] "2-T cell"                  "20-Ciliated"              
[15] "21-Unciliated epithelia 1" "22-Unciliated epithelia 2"
[17] "23-Stromal fibroblasts"    "24-Fibroblast"            
[19] "25-Fibroblast"             "26-Fibroblast"            
[21] "27-Fibroblast"             "28-B cell"                
[23] "29-Fibroblast"             "3-Epithelial cell"        
[25] "30-T cell"                 "31-Unciliated epithelia 1"
[27] "32-Mast cell"              "33-Endothelia"            
[29] "34-Epithelial cell"        "35-B cell"                
[31] "4-Lymphocytes"             "5-Macrophage"             
[33] "6-Fibroblast"              "7-Smooth muscle cells"    
[35] "8-Stromal fibroblasts"     "9-Epithelial cell"        
> my_levels <- as.character(c(3,9,10,16,17,
+                             11,20,21,22,31,19,34,
+                             0,27,
+                             6,8,12,14,15,18,24,25,26,29,7,23,
+                             1,33,
+                             2,4,30,
+                             5,13,
+                             32,
+                             28,35))
> 
> for ( i in levels(factor(atac$predictedGroup_ArchR))){
+   num <-  gsub("-.*","",i)
+   idx <- match(num,my_levels)
+   atac$predictedGroup_ArchR <- str_replace(atac$predictedGroup_ArchR,pattern = i,replacement = paste0(idx,"_",atac$predictedGroup_ArchR))
+   print("iter complete")
+ }
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
> test <- as.data.frame(atac@cellColData)
> test <- test[test$Sample == "38FE7L",]
> levels(factor(test$predictedGroup_ArchR))
[1] "1_3-Epithelial cell"      "15_6-Fibroblast"         
[3] "22_25-Fibroblast"         "25_7-Smooth muscle cells"
[5] "27_1-Endothelia"          "28_33-Endothelia"        
[7] "29_2-T cell"             
> 
> new.idents <- setdiff(levels(factor(atac$predictedGroup_ArchR)),
+         c("16_8-Stromal fibroblasts",
+           "17_12-Stromal fibroblasts",
+           "18_14-Stromal fibroblasts",
+           "19_15-Stromal fibroblasts",
+           "20_18-Fibroblast",
+           "21_24-Fibroblast",
+           "23_215_23_26-Fibroblast",
+           "24_29-Fibroblast",
+           "26_23-Stromal fibroblasts",
+           "31_30-T cell",
+           "30_4-Lymphocytes",
+           "34_32-Mast cell",
+           "33_13-Macrophages",
+           "36_35-B cell",
+           "32_5-Macrophage",
+           "35_28-B cell" ))
> 
> idxSample <- BiocGenerics::which(atac$predictedGroup_ArchR %in% new.idents)
> cellsSample <- atac$cellNames[idxSample]
> atac.sub <- atac[cellsSample, ]
> 
> #########################################################################
> # Make modified getP2G function:
> getPeak2GeneLinks.mod <- function(
+   ArchRProj = NULL, 
+   corCutOff = 0.45, 
+   PValCutOff = 0.0001,
+   varCutOffATAC = 0.25,
+   varCutOffRNA = 0.25,
+   resolution = 1, 
+   returnLoops = TRUE
+ ){
+   
+   .validInput(input = ArchRProj, name = "ArchRProj", valid = "ArchRProject")
+   .validInput(input = corCutOff, name = "corCutOff", valid = "numeric")
+   .validInput(input = PValCutOff, name = "PValCutOff", valid = "numeric")
+   .validInput(input = varCutOffATAC, name = "varCutOffATAC", valid = "numeric")
+   .validInput(input = varCutOffRNA, name = "varCutOffRNA", valid = "numeric")
+   .validInput(input = resolution, name = "resolution", valid = c("integer", "null"))
+   .validInput(input = returnLoops, name = "returnLoops", valid = "boolean")
+   
+   if(is.null(ArchRProj@peakSet)){
+     return(NULL)
+   }
+   
+   if(is.null(metadata(ArchRProj@peakSet)$Peak2GeneLinks)){
+     
+     return(NULL)
+     
+   }else{
+     
+     p2g <- metadata(ArchRProj@peakSet)$Peak2GeneLinks
+     p2g <- p2g[which(p2g$Correlation >= corCutOff & p2g$RawPVal <= PValCutOff), ,drop=FALSE]
+     
+     if(!is.null(varCutOffATAC)){
+       p2g <- p2g[which(p2g$VarQATAC > varCutOffATAC),]
+     }
+     
+     if(!is.null(varCutOffRNA)){
+       p2g <- p2g[which(p2g$VarQRNA > varCutOffRNA),]
+     }
+     
+     if(returnLoops){
+       
+       peakSummits <- resize(metadata(p2g)$peakSet, 1, "center")
+       geneStarts <- resize(metadata(p2g)$geneSet, 1, "start")
+       
+       if(!is.null(resolution)){
+         summitTiles <- floor(start(peakSummits) / resolution) * resolution + floor(resolution / 2)
+         geneTiles <- floor(start(geneStarts) / resolution) * resolution + floor(resolution / 2)
+       }else{
+         summitTiles <- start(peakSummits)
+         geneTiles <- start(geneTiles)
+       }
+       
+       loops <- .constructGR(
+         seqnames = seqnames(peakSummits[p2g$idxATAC]),
+         start = summitTiles[p2g$idxATAC],
+         end = geneTiles[p2g$idxRNA]
+       )
+       mcols(loops)$value <- p2g$Correlation
+       mcols(loops)$FDR <- p2g$FDR
+       
+       loops <- loops[order(mcols(loops)$value, decreasing=TRUE)]
+       loops <- unique(loops)
+       loops <- loops[width(loops) > 0]
+       loops <- sort(sortSeqlevels(loops))
+       
+       loops <- SimpleList(Peak2GeneLinks = loops)
+       
+       return(loops)
+       
+     }else{
+       
+       return(p2g)
+       
+     }
+     
+   }
+   
+ }
> 
> 
> 
> #########################################################################
> 
> plot <- plotBrowserTrack(atac.sub,geneSymbol ="RHEB", groupBy = "predictedGroup_ArchR",
+                          features = GRangesList(TrackA = encode.all,TrackB = ft.peaks,TrackC = ov.peaks), 
+                          loops = getPeak2GeneLinks.mod(atac,corCutOff = 0.45,
+                                                    PValCutOff = 1e-12,varCutOffATAC = 0,
+                                                    varCutOffRNA = 0),upstream = 6000,downstream = 35000)
ArchR logging to : ArchRLogs/ArchR-plotBrowserTrack-d5cc1e2f5284-Date-2021-06-08_Time-23-50-06.log
If there is an issue, please report to github with logFile!
2021-06-08 23:50:07 : Validating Region, 0.012 mins elapsed.
GRanges object with 1 range and 2 metadata columns:
      seqnames              ranges strand |     gene_id      symbol
         <Rle>           <IRanges>  <Rle> | <character> <character>
  [1]     chr7 151466012-151520120      - |        6009        RHEB
  -------
  seqinfo: 24 sequences from hg38 genome
2021-06-08 23:50:07 : Adding Bulk Tracks (1 of 1), 0.014 mins elapsed.
2021-06-08 23:50:30 : Adding Feature Tracks (1 of 1), 0.402 mins elapsed.
2021-06-08 23:50:31 : Adding Loop Tracks (1 of 1), 0.409 mins elapsed.
2021-06-08 23:50:31 : Adding Gene Tracks (1 of 1), 0.414 mins elapsed.
2021-06-08 23:50:32 : Plotting, 0.424 mins elapsed.
ArchR logging successful to : ArchRLogs/ArchR-plotBrowserTrack-d5cc1e2f5284-Date-2021-06-08_Time-23-50-06.log
> 
> pdf("RHEB_final.pdf",width = 6,height = 8)
> grid::grid.draw(plot[[1]])
> dev.off()
pdf 
  2 
> 
> 
> names <- gsub(".*_","",atac.sub$predictedGroup_ArchR)
> saveRDS(names,"names.rds")
> rm(atac.sub)
> rm(atac)
> ####################################################################
> # PART 4: plot matching violin plots for RHEB expression and mTOR
> ####################################################################
> names <- readRDS("./names.rds")
> rna <- readRDS("./endo_ovar_All_scRNA_processed.rds")
> rna.sub <- rna[,rna$cell.type %in% intersect(levels(factor(rna$cell.type)),levels(factor(names)))]
> 
> my_levels <- as.character(c(3,9,10,16,17,
+                             11,20,21,22,31,19,34,
+                             0,27,
+                             6,25,7,
+                             1,33,
+                             2))
> 
> # Make violin plots for RHEB expression and mTOR pathway expression
> # Relevel object@ident
> rna.sub@active.ident <- factor(x =rna.sub$RNA_snn_res.0.7, levels = rev(my_levels))
> p1 <- VlnPlot(rna.sub,features = "RHEB",pt.size = 0)+coord_flip()+NoLegend()
> 
> 
> # Compute mTOR pathway member expression
> gset <- read.delim("./BIOCARTA_MTOR_PATHWAY.txt",header = T)
> gset <- as.character(gset$BIOCARTA_MTOR_PATHWAY[2:length(gset$BIOCARTA_MTOR_PATHWAY)])
> rna.sub <- AddModuleScore(rna.sub,features = list(gset),name = "mTOR_members",search = T)
Warning: The following features are not present in the object: SHLD2P3, attempting to find updated synonyms

  |                                                                            
  |                                                                      |   0%
  |                                                                            
  |======================================================================| 100%
Warning: No updated symbols found
Warning: The following features are still not present in the object: SHLD2P3
> 
> 
> p2 <- VlnPlot(rna.sub,features = "mTOR_members1",pt.size = 0)+coord_flip()+NoLegend()
> 
> CombinePlots(list(p1,p2),ncol=2)+ggsave("VlnPlots.pdf",width = 6,height = 8)
Warning message:
CombinePlots is being deprecated. Plots should now be combined using the patchwork system. 
> 
> 
> p1 <- p1$data
> colnames(p1)
[1] "RHEB"  "ident"
> kruskal.test(RHEB~ident,data = p1)

	Kruskal-Wallis rank sum test

data:  RHEB by ident
Kruskal-Wallis chi-squared = 19657, df = 19, p-value < 2.2e-16

> p2 <- p2$data
> colnames(p2)
[1] "mTOR_members1" "ident"        
> kruskal.test(mTOR_members1~ident,data = p2)

	Kruskal-Wallis rank sum test

data:  mTOR_members1 by ident
Kruskal-Wallis chi-squared = 10828, df = 19, p-value < 2.2e-16

> 
> 
> writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
> 
> proc.time()
   user  system elapsed 
554.708 109.639 691.210 
