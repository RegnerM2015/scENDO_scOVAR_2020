
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################
> # Matt Regner
> # Franco Lab 
> # 2020-2021
> # Description: plot figures for Fig. 2
> ###################################################
> 
> source("P2G_Heatmap_Distal.R")
> source("Archr_Peak_RawPval.R")
> source("Archr_Peak_Null_Permute.R")
> library(ggplot2)
> library(Seurat)
> library(scales)
> library(forcats)
> library(RColorBrewer)
> library(ArchR)
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians


Attaching package: ‘SummarizedExperiment’

The following object is masked from ‘package:Seurat’:

    Assays

Loading required package: data.table

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

Loading required package: rhdf5
Loading required package: magrittr

Attaching package: ‘ArchR’

The following objects are masked _by_ ‘.GlobalEnv’:

    addArchRDebugging, addArchRLogging, addCoAccessibility,
    addPeak2GeneLinks, correlateMatrices, correlateTrajectories,
    createLogFile, getArchRDebugging, getArchRLogging,
    getCoAccessibility, getFragmentsFromArrow, getMatrixFromArrow,
    getMatrixFromProject, getPeak2GeneLinks, peak2GeneHeatmap,
    plotPeak2GeneHeatmap, validBSgenome

> library(stringr)
> library(stringi)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following object is masked from ‘package:Biobase’:

    combine

The following objects are masked from ‘package:GenomicRanges’:

    intersect, setdiff, union

The following object is masked from ‘package:GenomeInfoDb’:

    intersect

The following objects are masked from ‘package:IRanges’:

    collapse, desc, intersect, setdiff, slice, union

The following objects are masked from ‘package:S4Vectors’:

    first, intersect, rename, setdiff, setequal, union

The following objects are masked from ‘package:BiocGenerics’:

    combine, intersect, setdiff, union

The following object is masked from ‘package:matrixStats’:

    count

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)

Attaching package: ‘tidyr’

The following object is masked from ‘package:magrittr’:

    extract

The following objects are masked from ‘package:Matrix’:

    expand, pack, unpack

The following object is masked from ‘package:S4Vectors’:

    expand

> addArchRThreads(32)
Setting default number of Parallel threads to 32.
> h5disableFileLocking()
> ####################################################################
> # PART 1: summary distribution histograms (correlation and p-values)
> # 1) Observed data
> # 2) Null data example
> ####################################################################
> # Read in P2G data
> p2g <- readRDS("./All_P2G_Observed.rds")
> p2g$RawPVal <- as.numeric(p2g$RawPVal)
> p2g$Correlation <- as.numeric(p2g$Correlation)
> 
> # Plot correlation histogram
> p1 <- ggplot(p2g,aes(x=Correlation))+geom_histogram(color="black",fill="gray90",size=0.3,boundary = 0,bins=15)+
+   theme_bw()+
+   scale_y_continuous(expand = c(0,0),limits=c(0,1500000)) +
+   scale_x_continuous(expand= c(0,0),limits = c(-1,1))
> 
> # Plot p-value histogram
> p2 <- ggplot(p2g,aes(x=RawPVal))+geom_histogram(color="black",fill="gray90",size=0.3,boundary = 0,bins=15)+
+   theme_bw()+
+   scale_y_continuous(expand = c(0,0),
+                      limits = c(0,1.75e+06)) +
+   scale_x_continuous(expand = c(0,0),
+                      limits = c(0,1))
> 
> 
> # Read in P2G data (null example)
> p2g <- readRDS("./All_P2G_Null_example.rds")
> p2g$RawPVal <- as.numeric(p2g$RawPVal)
> p2g$Correlation <- as.numeric(p2g$Correlation)
> 
> # Plot correlation histogram
> p3 <- ggplot(p2g,aes(x=Correlation))+geom_histogram(color="black",fill="gray90",size=0.3,boundary = 0,bins=15)+
+   theme_bw()+
+   scale_y_continuous(limits=c(0,1500000),expand=c(0,0)) +
+   scale_x_continuous(expand = c(0,0),limits = c(-1,1))
> 
> # Plot p-value histogram
> p4 <- ggplot(p2g,aes(x=RawPVal))+geom_histogram(color="black",fill="gray90",size=0.3,boundary = 0,bins=15)+
+   theme_bw()+
+   scale_y_continuous(expand = c(0,0),
+                      limits = c(0,1.75e+06)) +
+   scale_x_continuous(expand = c(0,0),limits = c(0,1))
> # Plot side-by-side
> CombinePlots(list(p1,p2,p3,p4),ncol=2)+ggsave("Histograms_obs_null.pdf",height =3,width = 4)
Warning message:
CombinePlots is being deprecated. Plots should now be combined using the patchwork system. 
> 
> 
> 
> 
> ############################################################################
> # PART 1.5.0.5: How many cancer specific peaks are deferentially accessible?
> ############################################################################
> 
> # Marker Peaks for malignant clusters with 100% patient specificity 
> atac <- readRDS("final_archr_proj_archrGS-P2Gs.rds")
> markersPeaks <- getMarkerFeatures(
+   ArchRProj = atac, 
+   useMatrix = "PeakMatrix", 
+   groupBy = "predictedGroup_ArchR",
+   bias = c("TSSEnrichment", "log10(nFrags)"),
+   testMethod = "wilcoxon"
+ )
ArchR logging to : ArchRLogs/ArchR-getMarkerFeatures-1472c573cf2a2-Date-2021-06-16_Time-01-38-57.log
If there is an issue, please report to github with logFile!
2021-06-16 01:39:00 : Matching Known Biases, 0.029 mins elapsed.
2021-06-16 01:40:05 : Computing Pairwise Tests (1 of 36), 1.112 mins elapsed.
2021-06-16 01:40:05 : Computing Pairwise Tests (2 of 36), 1.115 mins elapsed.
2021-06-16 01:40:06 : Computing Pairwise Tests (3 of 36), 1.118 mins elapsed.
2021-06-16 01:40:06 : Computing Pairwise Tests (4 of 36), 1.12 mins elapsed.
2021-06-16 01:40:06 : Computing Pairwise Tests (5 of 36), 1.123 mins elapsed.
2021-06-16 01:40:06 : Computing Pairwise Tests (6 of 36), 1.125 mins elapsed.
2021-06-16 01:40:06 : Computing Pairwise Tests (7 of 36), 1.127 mins elapsed.
2021-06-16 01:40:06 : Computing Pairwise Tests (8 of 36), 1.13 mins elapsed.
2021-06-16 01:40:06 : Computing Pairwise Tests (9 of 36), 1.133 mins elapsed.
2021-06-16 01:40:07 : Computing Pairwise Tests (10 of 36), 1.136 mins elapsed.
2021-06-16 01:40:07 : Computing Pairwise Tests (11 of 36), 1.14 mins elapsed.
2021-06-16 01:40:07 : Computing Pairwise Tests (12 of 36), 1.143 mins elapsed.
2021-06-16 01:40:07 : Computing Pairwise Tests (13 of 36), 1.146 mins elapsed.
2021-06-16 01:40:07 : Computing Pairwise Tests (14 of 36), 1.149 mins elapsed.
2021-06-16 01:40:08 : Computing Pairwise Tests (15 of 36), 1.152 mins elapsed.
2021-06-16 01:40:08 : Computing Pairwise Tests (16 of 36), 1.155 mins elapsed.
2021-06-16 01:40:08 : Computing Pairwise Tests (17 of 36), 1.158 mins elapsed.
2021-06-16 01:40:08 : Computing Pairwise Tests (18 of 36), 1.161 mins elapsed.
2021-06-16 01:40:08 : Computing Pairwise Tests (19 of 36), 1.164 mins elapsed.
2021-06-16 01:40:08 : Computing Pairwise Tests (20 of 36), 1.167 mins elapsed.
2021-06-16 01:40:09 : Computing Pairwise Tests (21 of 36), 1.17 mins elapsed.
2021-06-16 01:40:09 : Computing Pairwise Tests (22 of 36), 1.174 mins elapsed.
2021-06-16 01:40:09 : Computing Pairwise Tests (23 of 36), 1.178 mins elapsed.
2021-06-16 01:40:09 : Computing Pairwise Tests (24 of 36), 1.181 mins elapsed.
2021-06-16 01:40:10 : Computing Pairwise Tests (25 of 36), 1.184 mins elapsed.
2021-06-16 01:40:10 : Computing Pairwise Tests (26 of 36), 1.187 mins elapsed.
2021-06-16 01:40:10 : Computing Pairwise Tests (27 of 36), 1.19 mins elapsed.
2021-06-16 01:40:10 : Computing Pairwise Tests (28 of 36), 1.194 mins elapsed.
2021-06-16 01:40:10 : Computing Pairwise Tests (29 of 36), 1.198 mins elapsed.
2021-06-16 01:40:11 : Computing Pairwise Tests (30 of 36), 1.202 mins elapsed.
2021-06-16 01:40:11 : Computing Pairwise Tests (31 of 36), 1.206 mins elapsed.
2021-06-16 01:40:11 : Computing Pairwise Tests (32 of 36), 1.21 mins elapsed.
2021-06-16 01:45:33 : Computing Pairwise Tests (33 of 36), 6.579 mins elapsed.
2021-06-16 01:45:34 : Computing Pairwise Tests (34 of 36), 6.588 mins elapsed.
2021-06-16 01:45:40 : Computing Pairwise Tests (35 of 36), 6.692 mins elapsed.
2021-06-16 01:45:49 : Computing Pairwise Tests (36 of 36), 6.839 mins elapsed.
###########
2021-06-16 01:48:34 : Completed Pairwise Tests, 9.595 mins elapsed.
###########
ArchR logging successful to : ArchRLogs/ArchR-getMarkerFeatures-1472c573cf2a2-Date-2021-06-16_Time-01-38-57.log
> levels(factor(atac$predictedGroup_ArchR))
 [1] "0-Fibroblast"              "1-Endothelia"             
 [3] "10-Epithelial cell"        "11-Unciliated epithelia 1"
 [5] "12-Stromal fibroblasts"    "13-Macrophages"           
 [7] "14-Stromal fibroblasts"    "15-Stromal fibroblasts"   
 [9] "16-Fibroblast"             "17-Epithelial cell"       
[11] "18-Fibroblast"             "19-Epithelial cell"       
[13] "2-T cell"                  "20-Ciliated"              
[15] "21-Unciliated epithelia 1" "22-Unciliated epithelia 2"
[17] "23-Stromal fibroblasts"    "24-Fibroblast"            
[19] "25-Fibroblast"             "26-Fibroblast"            
[21] "27-Fibroblast"             "28-B cell"                
[23] "29-Fibroblast"             "3-Epithelial cell"        
[25] "30-T cell"                 "31-Unciliated epithelia 1"
[27] "32-Mast cell"              "33-Endothelia"            
[29] "34-Epithelial cell"        "35-B cell"                
[31] "4-Lymphocytes"             "5-Macrophage"             
[33] "6-Fibroblast"              "7-Smooth muscle cells"    
[35] "8-Stromal fibroblasts"     "9-Epithelial cell"        
> labels <- c("0-Fibroblast",
+             "10-Epithelial cell" ,
+             "11-Unciliated epithelia 1",
+             "16-Fibroblast",
+             "17-Epithelial cell" ,
+             "19-Epithelial cell" ,
+             "20-Ciliated",
+             "21-Unciliated epithelia 1",
+             "22-Unciliated epithelia 2",
+             "3-Epithelial cell",
+             "31-Unciliated epithelia 1",
+             "34-Epithelial cell",
+             "9-Epithelial cell",
+             "27-Fibroblast" 
+             
+             )
> 
> markerList <- getMarkers(markersPeaks, cutOff = "FDR <= 0.1 & Log2FC >= 0.5")
> markerList.sub <- markerList[names(markerList) %in% labels]
> markers.peaks <- unlist(markerList.sub)
> markers.peaks <- paste0(markers.peaks$seqnames,":",markers.peaks$start,"-",markers.peaks$end)
> markers.peaks <- unique(markers.peaks)
> 
> p2g.cancer <- readRDS("./Cancer_specific_P2G_table.rds")
> p2g.cancer.diff <- p2g.cancer[p2g.cancer$peakName %in% markers.peaks,]
> print(paste0(round(nrow(p2g.cancer.diff)/nrow(p2g.cancer)*100,3),"% of cancer-specifc P2Gs have differentially accessible peaks in the malignant cell populations! (FDR <= 0.1 & Log2FC >= 0.5)"))
[1] "83.817% of cancer-specifc P2Gs have differentially accessible peaks in the malignant cell populations! (FDR <= 0.1 & Log2FC >= 0.5)"
> print(paste0(round(length(unique(p2g.cancer.diff$peakName))/length(unique(p2g.cancer$peakName))*100,3),"% of cancer-specific peaks are differentially accessible in the malignant cell populations! (FDR <= 0.1 & Log2FC >= 0.5)"))
[1] "82.999% of cancer-specific peaks are differentially accessible in the malignant cell populations! (FDR <= 0.1 & Log2FC >= 0.5)"
> 
> p2g.cancer <- readRDS("./Cancer_enriched_P2G_table.rds")
> p2g.cancer.diff <- p2g.cancer[p2g.cancer$peakName %in% markers.peaks,]
> print(paste0(round(nrow(p2g.cancer.diff)/nrow(p2g.cancer)*100,3),"% of cancer-enriched P2Gs have differentially accessible peaks in the malignant cell populations! (FDR <= 0.1 & Log2FC >= 0.5)"))
[1] "88.818% of cancer-enriched P2Gs have differentially accessible peaks in the malignant cell populations! (FDR <= 0.1 & Log2FC >= 0.5)"
> print(paste0(round(length(unique(p2g.cancer.diff$peakName))/length(unique(p2g.cancer$peakName))*100,3),"% of cancer-enriched peaks are differentially accessible in the malignant cell populations! (FDR <= 0.1 & Log2FC >= 0.5)"))
[1] "87.431% of cancer-enriched peaks are differentially accessible in the malignant cell populations! (FDR <= 0.1 & Log2FC >= 0.5)"
> 
> 
> ####################################################################
> # PART 1.5.1: Investigate the near neighboring gene rule in P2Gs:
> ####################################################################
> p2g <- readRDS("./All_P2G_Observed.rds")
> p2g <- p2g[p2g$Correlation >= 0.45,]
> p2g <- p2g[p2g$RawPVal <= 1e-12,]
> p2g <- p2g[p2g$peakType == "Distal",]# Subset to distal P2Gs
> p2g$idx <- paste0(p2g$idxATAC,"-",p2g$idxRNA)
> p2g.cancer <- readRDS("./Cancer_specific_P2G_table.rds")
> p2g$Cancer.Specific <- ifelse(p2g$idx %in% p2g.cancer$idx,"Cancer","Normal")
> 
> p2g$p2g.pair <- paste0(p2g$peakName,"::",p2g$geneName)
> 
> atac <- readRDS("final_archr_proj_archrGS-P2Gs.rds")
> peak.info <- getPeakSet(atac)
> p2g.nearest.pair <- paste0(peak.info@seqnames,":",peak.info@ranges,"::",peak.info$nearestGene)
> 
> p2g$Nearest <- ifelse(p2g$p2g.pair %in% p2g.nearest.pair,"Yes","No")
> 
> 
> p2g.norm <- p2g[p2g$Cancer.Specific == "Normal",]
> p2g.cancer <- p2g[p2g$Cancer.Specific == "Cancer",]
> 
> 
> p2g.yes <- p2g[p2g$Nearest == "Yes",]
> print(length(unique(p2g.yes$peakName))/length(unique(p2g$peakName)))
[1] 0.4364895
> print(nrow(p2g.yes)/nrow(p2g))
[1] 0.2982846
> 
> ggplot(p2g) +
+   aes(x = Cancer.Specific, fill = factor(Nearest),boundary=0) +
+   geom_bar(position = "fill")+
+   scale_y_continuous(expand = c(0,0))+
+   scale_x_discrete(expand=c(0,0))+
+   theme_classic()+ggsave("ProportionofP2Gs_predicted_by_NearestRule.pdf",width = 4,height = 3)
> 
> # Proportions differ significantly by fisher exact test:
> 
> cancer.nearest <- p2g.cancer[p2g.cancer$Nearest == "Yes",]
> norm.nearest <- p2g.norm[p2g.norm$Nearest == "Yes",]
> 
> res <- fisher.test(matrix(c(nrow(cancer.nearest), nrow(norm.nearest), 
+                             nrow(p2g.cancer)-nrow(cancer.nearest), nrow(p2g.norm)-nrow(norm.nearest)),
+                             ncol = 2))
> print(res)

	Fisher's Exact Test for Count Data

data:  matrix(c(nrow(cancer.nearest), nrow(norm.nearest), nrow(p2g.cancer) - nrow(cancer.nearest), nrow(p2g.norm) - nrow(norm.nearest)), ncol = 2)
p-value < 2.2e-16
alternative hypothesis: true odds ratio is not equal to 1
95 percent confidence interval:
 0.6895069 0.7847197
sample estimates:
odds ratio 
 0.7357273 

> print(paste0("The proportion of cancer-specific P2Gs predictable by nearest neighboring rule is significantly less relative to the normal P2Gs (p=",res$p.value,")"))
[1] "The proportion of cancer-specific P2Gs predictable by nearest neighboring rule is significantly less relative to the normal P2Gs (p=1.46769241511616e-21)"
> ####################################################################
> # PART 1.5.2: Investigate the distances between peaks and linked genes
> ####################################################################
> # p2g <- readRDS("./All_P2G_Observed.rds")
> # p2g <- p2g[p2g$Correlation >= 0.45,]
> # p2g <- p2g[p2g$RawPVal <= 1e-12,]
> # p2g <- p2g[p2g$peakType == "Distal",]# Subset to distal P2Gs
> # p2g$idx <- paste0(p2g$idxATAC,"-",p2g$idxRNA)
> # p2g.cancer <- readRDS("./Cancer_specific_P2G_table.rds")
> # p2g$Cancer.Specific <- ifelse(p2g$idx %in% p2g.cancer$idx,"Cancer","Normal")
> # 
> # p2g$p2g.pair <- paste0(p2g$peakName,"::",p2g$geneName)
> # 
> # atac <- readRDS("final_archr_proj_archrGS-P2Gs.rds")
> # gene.info <- getGenes(atac)
> # gene.info <- data.frame(geneName=gene.info$symbol,
> #                         geneCoord=paste0(gene.info@seqnames,":",gene.info@ranges))
> # 
> # p2g <- merge(p2g,gene.info,by="geneName")
> # p2g.check.trans <- tidyr::separate(p2g, col="peakName",into=c("chrom.peak","ranges.peak"),sep=":")
> # p2g.check.trans <- tidyr::separate(p2g.check.trans, col="geneCoord",into=c("chrom.gene","ranges.gene"),sep=":")
> # length(which(p2g.check.trans$chrom.gene == p2g.check.trans$chrom.peak))# No trans interactions are in the data
> # 
> # peak.gr <- GRanges(p2g$peakName)
> # gene.gr <- GRanges(p2g$geneCoord)
> # distance.gr <- GenomicRanges::distance(peak.gr,gene.gr)
> # 
> # p2g$p2g.distance <- distance.gr
> # 
> # 
> # p2g.norm <- p2g[p2g$Cancer.Specific == "Normal",]
> # p2g.cancer <- p2g[p2g$Cancer.Specific == "Cancer",]
> # 
> # 
> # p <- ggplot(p2g,aes(x=p2g.distance))
> # p+geom_histogram(aes(fill=Cancer.Specific),position = "identity",alpha=0.5)+
> #   scale_fill_manual(values = c("orange", "gray"))+
> #   geom_vline( aes(xintercept=mean(p2g.cancer$p2g.distance)),
> #               linetype="dashed",col="orange")+
> #   geom_vline( aes(xintercept=mean(p2g.norm$p2g.distance)),
> #               linetype="dashed",col="gray")+
> #   theme_classic()
> # 
> # test <- wilcox.test(p2g.norm$p2g.distance,p2g.cancer$p2g.distance)
> # test <- wilcox.test(p2g.cancer$p2g.distance,p2g.norm$p2g.distance)
> 
> ##################################################################
> # PART 2: Plot proportion of peaks per number of peaks and 
> # average number of target genes per cancer and normal groups
> ####################################################################
> # Number of peaks per number of genes
> p2g.cancer <- readRDS("./Cancer_specific_P2G_table.rds")
> p2g.normal <- readRDS("./All_P2G_Observed.rds")
> p2g.normal <- p2g.normal[p2g.normal$Correlation >= 0.45,]
> p2g.normal <- p2g.normal[p2g.normal$RawPVal <= 1e-12,]
> p2g.normal <- p2g.normal[p2g.normal$peakType == "Distal",]
> p2g.normal <- p2g.normal[p2g.normal$peakName %ni% p2g.cancer$peakName,]
> 
> df.cancer <- data.frame(num.genes = table(p2g.cancer$peakName))
> df.cancer$cat <- ifelse(df.cancer$num.genes.Freq < 3,"1-2",df.cancer$num.genes.Freq)
> df.cancer$cat <- ifelse(df.cancer$num.genes.Freq >2,"3+",df.cancer$cat)
> 
> df.normal <- data.frame(num.genes = table(p2g.normal$peakName))
> df.normal$cat <- ifelse(df.normal$num.genes.Freq < 3,"1-2",df.normal$num.genes.Freq)
> df.normal$cat <- ifelse(df.normal$num.genes.Freq >2,"3+",df.normal$cat)
> 
> head(df.normal)
            num.genes.Var1 num.genes.Freq cat
1 chr1:100658127-100658627              1 1-2
2 chr1:100708589-100709089              1 1-2
3 chr1:100836123-100836623              1 1-2
4 chr1:100847371-100847871              1 1-2
5 chr1:101161457-101161957              1 1-2
6 chr1:101161963-101162463              1 1-2
> head(df.cancer)
            num.genes.Var1 num.genes.Freq cat
1   chr1:10452158-10452658              1 1-2
2 chr1:108017670-108018170              1 1-2
3 chr1:108122261-108122761              1 1-2
4 chr1:108126538-108127038              1 1-2
5 chr1:109052541-109053041              1 1-2
6 chr1:109083841-109084341              1 1-2
> 
> df.normal$type <- "normal"
> df.cancer$type <- "cancer"
> 
> df<- rbind(df.normal,df.cancer)
> 
> 
> p1 <- ggplot(df, aes(x=type, y=num.genes.Freq, fill = type)) +
+   stat_summary(geom = "bar", fun.y = mean, position = "dodge",width=0.3) +
+   stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge",width=0.15)+
+   theme_classic()+  coord_cartesian(ylim=c(1.44,1.65))+NoLegend()
Warning message:
`fun.y` is deprecated. Use `fun` instead. 
> 
> df.cancer %>% 
+   count(cat) %>% 
+   mutate(perc = (n / nrow(df.cancer)*100)) -> cancer
> df.normal %>% 
+   count(cat) %>% 
+   mutate(perc = (n / nrow(df.normal)*100)) -> normal
> 
> cancer$type <- "cancer"
> normal$type <- "normal"
> 
> comb <- rbind(cancer,normal)
> print(comb)
  cat     n      perc   type
1 1-2  3274 88.774403 cancer
2  3+   414 11.225597 cancer
3 1-2 20187 91.071912 normal
4  3+  1979  8.928088 normal
> p2 <- ggplot(comb,aes(x=cat,y=perc,fill=type))+
+   geom_bar(stat="identity",position = position_dodge(width=0.75),width=0.6)+
+   theme_classic()+
+   geom_text(aes(label=round(perc,3)), vjust=-0.4, size=3.5,position = position_dodge(width=0.75))+
+   scale_y_continuous(expand = c(0,0),limits=c(0,100))+NoLegend()
> 
> 
> CombinePlots(list(p2,p1),ncol=2)+ggsave("Barcharts_P2G_plots.pdf",width=6,height=3)
Warning message:
CombinePlots is being deprecated. Plots should now be combined using the patchwork system. 
> 
> # Cancer specific peaks link to more genes on average with statistical significance:
> test <- wilcox.test(df.cancer$num.genes.Freq,df.normal$num.genes.Freq,correct = F)
> print(test)

	Wilcoxon rank sum test

data:  df.cancer$num.genes.Freq and df.normal$num.genes.Freq
W = 42260820, p-value = 1.553e-05
alternative hypothesis: true location shift is not equal to 0

> print(test$p.value)
[1] 1.553166e-05
> print(paste0("Cancer-specific peaks link to more genes on average (1.57 v. 1.44 genes, p=",test$p.value,")"))
[1] "Cancer-specific peaks link to more genes on average (1.57 v. 1.44 genes, p=1.55316553235502e-05)"
> 
> # Proportion of 3+ peaks is greater in cancer-specific peaks relative to normal peaks:
> res <- fisher.test(matrix(c(414, 1979, 
+                             3274, 20187),
+                           ncol = 2))
> print(res)

	Fisher's Exact Test for Count Data

data:  matrix(c(414, 1979, 3274, 20187), ncol = 2)
p-value = 1.297e-05
alternative hypothesis: true odds ratio is not equal to 1
95 percent confidence interval:
 1.150129 1.444121
sample estimates:
odds ratio 
  1.289861 

> print(res$p.value)
[1] 1.296756e-05
> print(paste0("The proportion of cancer-specific peaks linking to 3 or more genes is significantly greater relative to the normal peaks (p=",res$p.value,")"))
[1] "The proportion of cancer-specific peaks linking to 3 or more genes is significantly greater relative to the normal peaks (p=1.29675642092236e-05)"
> 
> ####################################################################
> # PART 3: browser track for RHEB enhancers
> # 1) Plot browser track
> # 2) Verify cancer-specific enhancers have differential accessibility
> ####################################################################
> 
> # Read in other annotation features:
> encode.all <- read.delim("./GRCh38-ccREs.bed",header =F)
> colnames(encode.all)[1:3] <- c("seqnames","start","end")
> encode.all <- makeGRangesFromDataFrame(encode.all)
> 
> ft.peaks <- readRDS("./Fallopian_Tube_Cell_line_Peaks.rds")
> ft.peaks <- ft.peaks[,3:5]
> colnames(ft.peaks)[1:3] <- c("seqnames","start","end")
> ft.peaks <- makeGRangesFromDataFrame(ft.peaks)
> 
> ov.peaks <- readRDS("./Ovarian_Epithelial_Cell_line_Peaks.rds")
> ov.peaks <- ov.peaks[,3:5]
> colnames(ov.peaks)[1:3] <- c("seqnames","start","end")
> ov.peaks <- makeGRangesFromDataFrame(ov.peaks)
> 
> atac <- readRDS("final_archr_proj_archrGS-P2Gs.rds")
> # ATAC
> levels(factor(atac$predictedGroup_ArchR))
 [1] "0-Fibroblast"              "1-Endothelia"             
 [3] "10-Epithelial cell"        "11-Unciliated epithelia 1"
 [5] "12-Stromal fibroblasts"    "13-Macrophages"           
 [7] "14-Stromal fibroblasts"    "15-Stromal fibroblasts"   
 [9] "16-Fibroblast"             "17-Epithelial cell"       
[11] "18-Fibroblast"             "19-Epithelial cell"       
[13] "2-T cell"                  "20-Ciliated"              
[15] "21-Unciliated epithelia 1" "22-Unciliated epithelia 2"
[17] "23-Stromal fibroblasts"    "24-Fibroblast"            
[19] "25-Fibroblast"             "26-Fibroblast"            
[21] "27-Fibroblast"             "28-B cell"                
[23] "29-Fibroblast"             "3-Epithelial cell"        
[25] "30-T cell"                 "31-Unciliated epithelia 1"
[27] "32-Mast cell"              "33-Endothelia"            
[29] "34-Epithelial cell"        "35-B cell"                
[31] "4-Lymphocytes"             "5-Macrophage"             
[33] "6-Fibroblast"              "7-Smooth muscle cells"    
[35] "8-Stromal fibroblasts"     "9-Epithelial cell"        
> my_levels <- as.character(c(3,9,10,16,17,
+                             11,20,21,22,31,19,34,
+                             0,27,
+                             6,8,12,14,15,18,24,25,26,29,7,23,
+                             1,33,
+                             2,4,30,
+                             5,13,
+                             32,
+                             28,35))
> 
> for ( i in levels(factor(atac$predictedGroup_ArchR))){
+   num <-  gsub("-.*","",i)
+   idx <- match(num,my_levels)
+   atac$predictedGroup_ArchR <- str_replace(atac$predictedGroup_ArchR,pattern = i,replacement = paste0(idx,"_",atac$predictedGroup_ArchR))
+   print("iter complete")
+ }
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
[1] "iter complete"
> test <- as.data.frame(atac@cellColData)
> test <- test[test$Sample == "38FE7L",]
> levels(factor(test$predictedGroup_ArchR))
[1] "1_3-Epithelial cell"      "15_6-Fibroblast"         
[3] "22_25-Fibroblast"         "25_7-Smooth muscle cells"
[5] "27_1-Endothelia"          "28_33-Endothelia"        
[7] "29_2-T cell"             
> 
> new.idents <- setdiff(levels(factor(atac$predictedGroup_ArchR)),
+         c("16_8-Stromal fibroblasts",
+           "17_12-Stromal fibroblasts",
+           "18_14-Stromal fibroblasts",
+           "19_15-Stromal fibroblasts",
+           "20_18-Fibroblast",
+           "21_24-Fibroblast",
+           "23_215_23_26-Fibroblast",
+           "24_29-Fibroblast",
+           "26_23-Stromal fibroblasts",
+           "31_30-T cell",
+           "30_4-Lymphocytes",
+           "34_32-Mast cell",
+           "33_13-Macrophages",
+           "36_35-B cell",
+           "32_5-Macrophage",
+           "35_28-B cell" ))
> 
> idxSample <- BiocGenerics::which(atac$predictedGroup_ArchR %in% new.idents)
> cellsSample <- atac$cellNames[idxSample]
> atac.sub <- atac[cellsSample, ]
> 
> #########################################################################
> # Make modified getP2G function:
> getPeak2GeneLinks.mod <- function(
+   ArchRProj = NULL, 
+   corCutOff = 0.45, 
+   PValCutOff = 0.0001,
+   varCutOffATAC = 0.25,
+   varCutOffRNA = 0.25,
+   resolution = 1, 
+   returnLoops = TRUE
+ ){
+   
+   .validInput(input = ArchRProj, name = "ArchRProj", valid = "ArchRProject")
+   .validInput(input = corCutOff, name = "corCutOff", valid = "numeric")
+   .validInput(input = PValCutOff, name = "PValCutOff", valid = "numeric")
+   .validInput(input = varCutOffATAC, name = "varCutOffATAC", valid = "numeric")
+   .validInput(input = varCutOffRNA, name = "varCutOffRNA", valid = "numeric")
+   .validInput(input = resolution, name = "resolution", valid = c("integer", "null"))
+   .validInput(input = returnLoops, name = "returnLoops", valid = "boolean")
+   
+   if(is.null(ArchRProj@peakSet)){
+     return(NULL)
+   }
+   
+   if(is.null(metadata(ArchRProj@peakSet)$Peak2GeneLinks)){
+     
+     return(NULL)
+     
+   }else{
+     
+     p2g <- metadata(ArchRProj@peakSet)$Peak2GeneLinks
+     p2g <- p2g[which(p2g$Correlation >= corCutOff & p2g$RawPVal <= PValCutOff), ,drop=FALSE]
+     
+     if(!is.null(varCutOffATAC)){
+       p2g <- p2g[which(p2g$VarQATAC > varCutOffATAC),]
+     }
+     
+     if(!is.null(varCutOffRNA)){
+       p2g <- p2g[which(p2g$VarQRNA > varCutOffRNA),]
+     }
+     
+     if(returnLoops){
+       
+       peakSummits <- resize(metadata(p2g)$peakSet, 1, "center")
+       geneStarts <- resize(metadata(p2g)$geneSet, 1, "start")
+       
+       if(!is.null(resolution)){
+         summitTiles <- floor(start(peakSummits) / resolution) * resolution + floor(resolution / 2)
+         geneTiles <- floor(start(geneStarts) / resolution) * resolution + floor(resolution / 2)
+       }else{
+         summitTiles <- start(peakSummits)
+         geneTiles <- start(geneTiles)
+       }
+       
+       loops <- .constructGR(
+         seqnames = seqnames(peakSummits[p2g$idxATAC]),
+         start = summitTiles[p2g$idxATAC],
+         end = geneTiles[p2g$idxRNA]
+       )
+       mcols(loops)$value <- p2g$Correlation
+       mcols(loops)$FDR <- p2g$FDR
+       
+       loops <- loops[order(mcols(loops)$value, decreasing=TRUE)]
+       loops <- unique(loops)
+       loops <- loops[width(loops) > 0]
+       loops <- sort(sortSeqlevels(loops))
+       
+       loops <- SimpleList(Peak2GeneLinks = loops)
+       
+       return(loops)
+       
+     }else{
+       
+       return(p2g)
+       
+     }
+     
+   }
+   
+ }
> 
> 
> 
> #########################################################################
> # Color rows:
> 
> epithelial.cols <- colorRampPalette(c("#A0E989", "#245719"))
> epithelial.cols <- epithelial.cols(14)
> 
> fibro.cols <-colorRampPalette(c("#FABFD2", "#B1339E"))
> fibro.cols <- fibro.cols(10)
> 
> smooth.cols <- c("#b47fe5","#d8b7e8")
> 
> endo.cols <- c("#93CEFF","#4A99FF")
> 
> t.cols <- c("gray60","gray20","gray40")
> 
> macro.cols <- c("#ff6600","#ff9d5c")
> 
> mast.cols <- "gold3"
> 
> b.cols <- c("#B22222","#CD5C5C")
> 
> 
> cols <- c(epithelial.cols,fibro.cols,smooth.cols,endo.cols,t.cols,macro.cols,mast.cols,b.cols)
> cols <- cols[-c(16:21,23:24,26,30:36)]
> cols <- cols[c(8:12,1:7,13:20)]
> plot <- plotBrowserTrack(atac.sub,geneSymbol ="RHEB", groupBy = "predictedGroup_ArchR",
+                          features = GRangesList(TrackA = encode.all,TrackB = ft.peaks,TrackC = ov.peaks), 
+                          loops = getPeak2GeneLinks.mod(atac,corCutOff = 0.45,
+                                                    PValCutOff = 1e-12,varCutOffATAC = 0,
+                                                    varCutOffRNA = 0),upstream = 6000,downstream = 35000,
+                          pal=cols)
ArchR logging to : ArchRLogs/ArchR-plotBrowserTrack-1472c9955b3a-Date-2021-06-16_Time-01-57-40.log
If there is an issue, please report to github with logFile!
2021-06-16 01:57:42 : Validating Region, 0.02 mins elapsed.
GRanges object with 1 range and 2 metadata columns:
      seqnames              ranges strand |     gene_id      symbol
         <Rle>           <IRanges>  <Rle> | <character> <character>
  [1]     chr7 151466012-151520120      - |        6009        RHEB
  -------
  seqinfo: 24 sequences from hg38 genome
2021-06-16 01:57:42 : Adding Bulk Tracks (1 of 1), 0.023 mins elapsed.
2021-06-16 01:57:57 : Adding Feature Tracks (1 of 1), 0.272 mins elapsed.
2021-06-16 01:57:57 : Adding Loop Tracks (1 of 1), 0.281 mins elapsed.
2021-06-16 01:57:58 : Adding Gene Tracks (1 of 1), 0.286 mins elapsed.
2021-06-16 01:57:58 : Plotting, 0.298 mins elapsed.
ArchR logging successful to : ArchRLogs/ArchR-plotBrowserTrack-1472c9955b3a-Date-2021-06-16_Time-01-57-40.log
> 
> pdf("RHEB_final.pdf",width = 6,height = 8)
> grid::grid.draw(plot[[1]])
> dev.off()
pdf 
  2 
> 
> 
> plot <- plotBrowserTrack(atac.sub,geneSymbol ="MUC16", groupBy = "predictedGroup_ArchR",
+                          features = GRangesList(TrackA = encode.all,TrackB = ft.peaks,TrackC = ov.peaks), 
+                          loops = getPeak2GeneLinks.mod(atac,corCutOff = 0.45,
+                                                        PValCutOff = 1e-12,varCutOffATAC = 0,
+                                                        varCutOffRNA = 0),upstream = 300000,downstream = 80000,
+                          pal=cols)
ArchR logging to : ArchRLogs/ArchR-plotBrowserTrack-1472c7418b352-Date-2021-06-16_Time-01-58-08.log
If there is an issue, please report to github with logFile!
2021-06-16 01:58:08 : Validating Region, 0.016 mins elapsed.
GRanges object with 1 range and 2 metadata columns:
      seqnames          ranges strand |     gene_id      symbol
         <Rle>       <IRanges>  <Rle> | <character> <character>
  [1]    chr19 8848844-8981342      - |       94025       MUC16
  -------
  seqinfo: 24 sequences from hg38 genome
2021-06-16 01:58:09 : Adding Bulk Tracks (1 of 1), 0.018 mins elapsed.
2021-06-16 01:58:15 : Adding Feature Tracks (1 of 1), 0.129 mins elapsed.
2021-06-16 01:58:16 : Adding Loop Tracks (1 of 1), 0.136 mins elapsed.
2021-06-16 01:58:17 : Adding Gene Tracks (1 of 1), 0.155 mins elapsed.
2021-06-16 01:58:17 : Plotting, 0.162 mins elapsed.
ArchR logging successful to : ArchRLogs/ArchR-plotBrowserTrack-1472c7418b352-Date-2021-06-16_Time-01-58-08.log
> 
> pdf("MUC16_final.pdf",width = 6,height = 8)
> grid::grid.draw(plot[[1]])
> dev.off()
pdf 
  2 
> 
> names <- gsub(".*_","",atac.sub$predictedGroup_ArchR)
> saveRDS(names,"names.rds")
> rm(atac.sub)
> rm(atac)
> ####################################################################
> # PART 4: plot matching violin plots for RHEB expression and mTOR
> ####################################################################
> names <- readRDS("./names.rds")
> rna <- readRDS("./endo_ovar_All_scRNA_processed.rds")
> rna.sub <- rna[,rna$cell.type %in% intersect(levels(factor(rna$cell.type)),levels(factor(names)))]
> 
> my_levels <- as.character(c(3,9,10,16,17,
+                             11,20,21,22,31,19,34,
+                             0,27,
+                             6,25,7,
+                             1,33,
+                             2))
> 
> # Make violin plots for RHEB expression and mTOR pathway expression
> # Relevel object@ident
> rna.sub@active.ident <- factor(x =rna.sub$RNA_snn_res.0.7, levels = rev(my_levels))
> p1 <- VlnPlot(rna.sub,features = "RHEB",pt.size = 0)+coord_flip()+NoLegend()
> p1 <- ggplot(p1$data,aes(y=ident,x=RHEB))+geom_boxplot(aes(fill=ident),lwd=0.45,outlier.size = 0.95,fatten = 0.95)+NoLegend()+
+   theme_classic()+NoLegend()+ylab("Cluster #")+xlab("RHEB expression")
> 
> 
> # Compute mTOR pathway member expression
> gset <- read.delim("./BIOCARTA_MTOR_PATHWAY.txt",header = T)
> gset <- as.character(gset$BIOCARTA_MTOR_PATHWAY[2:length(gset$BIOCARTA_MTOR_PATHWAY)])
> rna.sub <- AddModuleScore(rna.sub,features = list(gset),name = "mTOR_members",search = T)
Warning: The following features are not present in the object: SHLD2P3, attempting to find updated synonyms

  |                                                                            
  |                                                                      |   0%
  |                                                                            
  |======================================================================| 100%
Warning: No updated symbols found
Warning: The following features are still not present in the object: SHLD2P3
> 
> 
> p2 <- VlnPlot(rna.sub,features = "mTOR_members1",pt.size = 0)+coord_flip()+NoLegend()
> p2 <- ggplot(p2$data,aes(y=ident,x=mTOR_members1))+geom_boxplot(aes(fill=ident),lwd=0.45,outlier.size = 0.95,fatten = 0.95)+NoLegend()+
+   theme_classic()+NoLegend()+ylab("Cluster #")+xlab("mTOR member expression")
> CombinePlots(list(p1,p2),ncol=2)+ggsave("VlnPlots.pdf",width = 6,height = 8)
Warning message:
CombinePlots is being deprecated. Plots should now be combined using the patchwork system. 
> 
> # Differential enrichment of mTOR pathway members
> res <- kruskal.test(data=p2$data,mTOR_members1 ~ ident)
> print(res)

	Kruskal-Wallis rank sum test

data:  mTOR_members1 by ident
Kruskal-Wallis chi-squared = 10828, df = 19, p-value < 2.2e-16

> print(res$p.value)
[1] 0
> # Differential expression of RHEB in cluster 3
> grouped.markers <- FindMarkers(rna.sub,ident.1 = "3",
+                                ident.2 = as.character(c(9,10,16,17,
+                                            11,20,21,22,31,19,34,
+                                            0,27,
+                                            6,25,7,
+                                            1,33,
+                                            2)),only.pos = T)
> grouped.markers$gene <- rownames(grouped.markers)
> grouped.markers.RHEB <- grouped.markers[grouped.markers$gene == "RHEB",]
> print(grouped.markers.RHEB)# Significant up-regulation in cluster 3
     p_val avg_logFC pct.1 pct.2 p_val_adj gene
RHEB     0  1.384166 0.996 0.794         0 RHEB
> 
> writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
> 
> proc.time()
     user    system   elapsed 
10790.924  1725.247  2337.611 
